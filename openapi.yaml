openapi: '3.0.2'
info:
  title: Collective IAM
  version: '1.0.0'
servers:
  - url: https://ciam.centralmind.net

paths:
  /role/{roleId}:
    get:
      summary: 'Get a role'
      description: 'Get a role by its roleId'
      security:
        - bearerAuth: ['ciam.role.get.{ROLE_ID}']
      tags:
        - role
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
          description: 'The role ID'
      responses:
        '200':
          description: 'Returns the role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'Role not found'

    delete:
      security:
        - bearerAuth: ['ciam.role.delete.{ROLE_ID}']
      summary: 'Delete a role'
      description: 'Delete a role by its role ID'
      tags:
        - role
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
          description: 'The role ID'
      responses:
        '200':
          description: 'Returns the deleted role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'Role not found'

  /role/create:
    post:
      summary: 'Create a role'
      security:
        - bearerAuth: ['ciam.role.create', 'ciam.permission.grant.{FLAGS}']
      description: |
        Create a new role from a name, description, and optionally also its permission flags.<br>
        `ciam.permission.grant.FLAGS` is only checked if permissions are provided, for example if you try to
        create a role with the permissions [`chipware.ban`, `chipware.unban`] then you will need to have the
        permissions [`ciam.permission.grant.chipware.ban`, `ciam.permission.grant.chipware.unban`].
      tags:
        - role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of this role'
                description:
                  type: string
                  description: 'The description of this role'
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Flag'
                  description: 'The permissions of this role'
              required:
                - name
                - description
      responses:
        '200':
          description: 'Returns the newly created role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: 'Invalid body'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Failed saving role to database'

  /role/update:
    post:
      summary: 'Update a role'
      security:
        - bearerAuth:
            [
              'ciam.role.update.{ROLE_ID}',
              'ciam.permission.grant.{FLAGS}',
              'ciam.permission.revoke.{FLAGS}',
            ]
      tags:
        - role
      requestBody:
        description: |
          The role to update, omitted fields wont be updated.<br>
          `ciam.permission.grant|revoke.FLAGS` is only checked if permissions are provided, for example if you try to
          set the permissions to [`chipware.ban`, `chipware.unban`] on a role that already has the permissions
          [`chipware.ban`, `chipware.kick`] then you will need to have the permissions
          [`ciam.permission.grant.chipware.unban`, `ciam.permission.revoke.chipware.kick`].
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  $ref: '#/components/schemas/ObjectId'
                  description: 'The id of the user to update'
                name:
                  type: string
                  description: 'New name of this role'
                description:
                  type: string
                  description: 'New description of this role'
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Flag'
                  description: 'New permissions of this role'
              required:
                - _id
      responses:
        '200':
          description: 'Returns the updated role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: 'Invalid body'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'Role not found'
        '500':
          description: 'Failed saving role to database'

  /role/list:
    get:
      summary: 'List roles'
      description: 'Get a list of all roles'
      security:
        - bearerAuth: ['ciam.role.list']
      tags:
        - role
      parameters:
        - in: query
          name: skip
          description: 'Number of roles to skip'
          required: false
          schema:
            type: number
            minimum: 0
        - in: query
          name: limit
          description: 'Maximum amount of roles to return'
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 'Returns the roles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: 'Invalid query parameters'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Failed listing roles'

  /user/create:
    post:
      security:
        - bearerAuth: ['ciam.user.create', 'ciam.permission.grant.{FLAGS}']
      summary: 'Create a user'
      description: |
        Create a new role from at least a name.<br>
        `ciam.permission.grant.FLAGS` is only checked if permissions are provided, for example if you try to
        create a role with the permissions [`chipware.ban`, `chipware.unban`] then you will need to have the
        permissions [`ciam.permission.grant.chipware.ban`, `ciam.permission.grant.chipware.unban`].
      tags:
        - user
      requestBody:
        description: 'The user to create'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of this user'
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/ObjectId'
                  description: 'The role ids this user has'
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Flag'
                  description: 'The permission flags this user has'
                discord:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/DiscordId'
                      description: 'User discord id'
              required:
                - name
      responses:
        '200':
          description: 'Returns the newly created user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid body'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Failed saving user to database'

  /user/list:
    get:
      summary: 'List users'
      description: 'Get a list of all users'
      security:
        - bearerAuth: ['ciam.user.list']
      tags:
        - user
      parameters:
        - in: query
          name: skip
          description: 'Number of users to skip'
          required: false
          schema:
            type: number
            minimum: 0
        - in: query
          name: limit
          description: 'Maximum amount of users to return'
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 'Returns the users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid query parameters'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Failed listing users'

  /user/{userId}:
    get:
      summary: 'Get a user'
      description: 'Get a user by their user id'
      security:
        - bearerAuth: ['ciam.user.get.{USER_ID}']
      tags:
        - user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
          description: 'The user ID'
      responses:
        '200':
          description: 'Returns the user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'User not found'

    delete:
      summary: 'Delete a user'
      description: 'Delete a user by their user id'
      security:
        - bearerAuth: ['ciam.user.delete.{USER_ID}']
      tags:
        - user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
          description: 'The user ID'
      responses:
        '200':
          description: 'Returns the deleted user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'User not found'

  /user/update:
    post:
      summary: 'Update a user'
      security:
        - bearerAuth:
            [
              'ciam.user.update.{USER_ID}',
              'ciam.permission.grant.{FLAGS}',
              'ciam.permission.revoke.{FLAGS}',
            ]
      tags:
        - user
      requestBody:
        description: |
          The user to update, omitted fields wont be updated.<br>
          `ciam.permission.grant|revoke.FLAGS` is only checked if permissions are provided, for example if you try to
          set the permissions to [`chipware.ban`, `chipware.unban`] on a user that already has the permissions
          [`chipware.ban`, `chipware.kick`] then you will need to have the permissions
          [`ciam.permission.grant.chipware.unban`, `ciam.permission.revoke.chipware.kick`].
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  $ref: '#/components/schemas/ObjectId'
                  description: 'The id of the user to update'
                name:
                  type: string
                  description: 'New name of this user'
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Flag'
                  description: 'New permissions of this user'
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/ObjectId'
                  description: 'New roles of this user'
              required:
                - _id
      responses:
        '200':
          description: 'Returns the updated user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid body'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'User not found'
        '500':
          description: 'Failed saving user to database'

  /user/valid:
    get:
      summary: 'Validate own token'
      description: 'Just requires you to have a valid token, no permissions.'
      tags:
        - user
      responses:
        '200':
          description: 'Your token is valid'
        '401':
          description: 'Your token is missing or invalid'

  /permission/{flag}:
    get:
      security:
        - bearerAuth: ['ciam.permission.get.{FLAG}']
      summary: 'Get a permission'
      description: 'Get a permission flag'
      tags:
        - permission
      parameters:
        - in: path
          name: flag
          required: true
          schema:
            $ref: '#/components/schemas/FlagStrict'
          description: 'The flag to find'
      responses:
        '200':
          description: 'Returns the permission'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'Permission not found'

    delete:
      security:
        - bearerAuth: ['ciam.permission.delete.{FLAG}']
      summary: 'Delete a permission'
      description: 'Delete a permission flag'
      tags:
        - permission
      parameters:
        - in: path
          name: flag
          required: true
          schema:
            $ref: '#/components/schemas/FlagStrict'
          description: 'The flag of this permission'
      responses:
        '200':
          description: 'Returns the deleted permission'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'Permission not found'

  /permission/create:
    post:
      security:
        - bearerAuth: ['ciam.permission.create.{FLAG}']
      summary: 'Create a permission'
      tags:
        - permission
      requestBody:
        description: 'The permission to create, a partial of the Permission object'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'A pretty name for this permission'
                description:
                  type: string
                  description: 'A description for this permission flag'
                flag:
                  $ref: '#/components/schemas/FlagStrict'
                  description: 'The permission flag to create'
              required:
                - name
                - description
                - flag
      responses:
        '200':
          description: 'Returns the newly created permission'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Error when saving the permission to the database'

  /permission/me:
    get:
      security:
        - bearerAuth: ['ciam.permission.me']
      summary: 'Own permissions'
      description: 'Get your own permissions. Limit and page query parameters lets you easily paginate.'
      tags:
        - permission
      parameters:
        - in: query
          name: skip
          description: 'Number of permissions to skip'
          required: false
          schema:
            type: number
            minimum: 0
        - in: query
          name: limit
          description: 'Maximum amount of permissions to return'
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 'All your permissions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Error when getting the permissions from the database'

  /permission/list:
    get:
      security:
        - bearerAuth: ['ciam.permission.list.{SEARCH}']
      summary: 'List permissions'
      description: 'Lets you list permissions. Limit and page query parameters lets you easily paginate.'
      tags:
        - permission
      parameters:
        - in: query
          name: skip
          description: 'Number of permissions to skip'
          required: false
          schema:
            type: number
            minimum: 0
        - in: query
          name: limit
          description: 'Maximum amount of permissions to return'
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 100
        - in: query
          name: search
          description: 'Return all flags that match this flag, wildcards included.'
          required: true
          schema:
            $ref: '#/components/schemas/Flag'
      responses:
        '200':
          description: 'All the permissions that matched the search query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Error when getting the permissions from the database'

  /permission/update:
    post:
      security:
        - bearerAuth: ['ciam.permission.update.{FLAG}']
      summary: 'Update a permission'
      tags:
        - permission
      requestBody:
        description: 'The permission to update.'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flag:
                  $ref: '#/components/schemas/FlagStrict'
                  description: 'The flag to update, fails if this flag does not exist'
                name:
                  type: string
                  description: 'The new pretty name of this flag'
                description:
                  type: string
                  description: 'The new description of this flag'
              required:
                - flag
      responses:
        '200':
          description: 'The now modified permission'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: 'Invalid body'
        '401':
          description: 'Invalid token or missing permissions'
        '500':
          description: 'Failed saving permission to database'

  /permission/has:
    post:
      security:
        - bearerAuth: ['ciam.permission.has.{ALL_REQUIRED_PERMISSIONS}']
      summary: 'Check permissions'
      description: 'Check if a user or role has the provided permissions.'
      tags:
        - permission
      requestBody:
        description: 'The permission check to perform'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckRequest'
      responses:
        '200':
          description: 'Returns a result of doing this permission check'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResult'
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid token or missing permissions'
        '404':
          description: 'Entity specified by id field was not found'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ObjectId:
      type: string
      maxLength: 24
      pattern: '^[0-9a-f]{24}$'
    DiscordId:
      type: string
      minLength: 16
      maxLength: 20
      pattern: '^[0-9]{16,20}$'
    Flag:
      type: string
      minLength: 1
      pattern: '^(([a-z]+|\?)(\.([a-z]+|\?))*(\.\*)?)|\*$'
    FlagStrict:
      type: string
      minLength: 1
      pattern: '^[a-z0-9]+(\.[a-z0-9]+)*$'
    Role:
      type: object
      description: 'A role is a collection of permission flags, and can be assigned to users'
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
          description: 'The roles ID, no tthe same as a discord ID'
        name:
          type: string
          description: 'The name of the role'
        description:
          type: string
          description: 'A description of this role'
        permissions:
          type: array
          description: 'A list of all the permission flags this role has'
          items:
            $ref: '#/components/schemas/Flag'
        creator:
          type: string
          description: 'The user id of the user who created this role'
      required:
        - _id
        - name
        - description
        - permissions
        - creator
    User:
      type: object
      description: 'A user can have both permissions and roles, and can be tied to a discord user, or be standalone'
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
          description: 'The users ID, not the same as a discord ID'
        name:
          type: string
          description: 'The name of this user'
        avatar:
          type: string
          description: 'Avatar url'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
          description: 'List of role ids this user has'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Flag'
          description: 'List of permission flags this user has'
        discord:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/DiscordId'
          required:
            - id
      required:
        - _id
        - name
        - avatar
        - roles
        - permissions
    Permission:
      type: object
      description: 'A permission has a string flag, and a description'
      properties:
        name:
          type: string
          description: 'A pretty name for a description'
        description:
          type: string
          description: 'A description for this specific permission flag'
        key:
          type: string
          description: 'The last path in this permission flag, this is what the description is actually describing'
        path:
          type: array
          items:
            type: string
          description: 'The path to this permission key'
        flag:
          $ref: '#/components/schemas/FlagStrict'
          description: 'The path and key combined'
        creator:
          $ref: '#/components/schemas/ObjectId'
          description: 'The user who created this permission'
      required:
        - name
        - description
        - key
        - path
        - flag
        - creator
    CheckResult:
      type: object
      description: 'The result of checking permissions'
      properties:
        passed:
          type: boolean
          description: 'If the permission check passed. True if the user/role had all the required permissions.'
        missing:
          type: array
          items:
            $ref: '#/components/schemas/Flag'
          description: 'The missing permissions that the user/role did not have, only present if specified in the request.'
      required:
        - passed
    CheckRequest:
      type: object
      description: 'A request to check permissions'
      discriminator:
        propertyName: type
        mapping:
          user: '#/components/schemas/UserRoleCheckRequest'
          role: '#/components/schemas/UserRoleCheckRequest'
          discordUser: '#/components/schemas/DiscordUserCheckRequest'
      properties:
        type:
          type: string
          description: 'Specify what sort of id the id field refers to'
    BaseCheckRequest:
      type: object
      properties:
        type:
          type: string
          description: 'What the id refers to'
          enum:
            - 'user'
            - 'role'
            - 'discordUser'
        required:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Flag'
          description: 'The required flags that this entity has to have'
        additional:
          type: array
          uniqueItems: true
          default: []
          items:
            $ref: '#/components/schemas/Flag'
          description: 'Additional flags that the entity will have when checking'
        includeMissing:
          type: boolean
          default: false
          description: 'If the response should include all the flags that the entity did not have from the required flags'
      required:
        - type
        - required
    UserRoleCheckRequest:
      allOf:
        - $ref: '#/components/schemas/BaseCheckRequest'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ObjectId'
          required:
            - id
    DiscordUserCheckRequest:
      allOf:
        - $ref: '#/components/schemas/BaseCheckRequest'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DiscordId'
          required:
            - id
